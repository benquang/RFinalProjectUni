group_by(InternalStorage) %>%
count() %>%
ggplot(aes(x="", y=n, fill=InternalStorage)) +
geom_bar(stat="identity", width=64, color = "yellow") +
coord_polar("y", start=0) +
theme_void()
ggplot(data = data) +
geom_bar(mapping = aes(x = InternalStorage), width = 16, color = "blue") +
labs(
x = "Internal storage(GB)",
y = "Số Lương")
data1 <- data
data1$InternalStorage<- as.character(data1$InternalStorage)
ggplot() +
geom_bar(data = data1,mapping = aes(x = InternalStorage, fill =                    InternalStorage)) +
coord_polar() +
xlab('Internal Storage (GB)') +
ylab('Range') +
ggtitle(label = 'Statistic of Internal Storage') +
scale_fill_discrete(name = "Category IS")
data2 <- data.frame(
group = c("Yes","No"),
value = c((sum(data$Wifi == "Yes")-sum(data$Wifi == "No"))/sum(data$Wifi == "Yes")*100,sum(data$Wifi == "No")/sum(data$Wifi == "Yes")*100)
)
ggplot(data = data2, aes(x = "", y = value, fill = group)) +
geom_col(color = "white") +
geom_text(aes(label = (round(value, digits = 2))),
position = position_stack(vjust = 0.5)) +
coord_polar(theta = "y") +
theme_void() +
ggtitle(label = 'Wifi Statistic') +
scale_fill_discrete(name = "Category")
data3 <- data.frame(
group = c("Yes","No"),
value = c((sum(data$`4G` == "Yes")-sum(data$`4G` == "No"))/sum(data$`4G` == "Yes")*100,sum(data$`4G` == "No")/sum(data$`4G` == "Yes")*100)
)
ggplot(data = data3, aes(x = "", y = value, fill = group)) +
geom_col(color = "white") +
geom_text(aes(label = (round(value, digits = 2))),
position = position_stack(vjust = 0.5)) +
coord_polar(theta = "y") +
theme_void() +
labs(title = '4G/LITE Statistic', caption = "Many device don't support 4G/LITE") +
scale_fill_discrete(name = "Category")
new_data<-data
new_data<-new_data[order(new_data$Brand),]
new_brand = `as.factor`(new_data$Brand)
new_price = new_data$Price
new_brand<-as.numeric(new_brand)
summary(aov(new_price~new_brand))
new_data<-data
new_data[new_data$Touchscreen == "Yes",]['Touchscreen']<-as.integer(1)
new_data[new_data$Touchscreen == "No",]['Touchscreen']<-as.integer(0)
new_data$Touchscreen<-as.numeric(new_data$Touchscreen)
cor.test(new_data$Price,new_data$Touchscreen)
new_data<-data
new_data<-new_data[order(new_data$OS),]
new_OS = as.numeric(as.factor(new_data$OS))
new_price = new_data$Price
summary(aov(new_OS~new_price))
new_data<-data
new_data[new_data$GPS == "Yes",]['GPS']<-as.integer(1)
new_data[new_data$GPS == "No",]['GPS']<-as.integer(0)
new_data$GPS<-as.numeric(new_data$GPS)
cor.test(new_data$Price,new_data$GPS)
new_data<-data
new_data[new_data$`3G` == "Yes",]['3G']<-as.integer(1)
new_data[new_data$`3G` == "No",]['3G']<-as.integer(0)
new_data$`3G`<-as.numeric(new_data$`3G`)
cor.test(new_data$Price,new_data$`3G`)
new_data<-data
new_data[new_data$`4G` == "Yes",]['4G']<-as.integer(1)
new_data[new_data$`4G` == "No",]['4G']<-as.integer(0)
new_data$`4G`<-as.numeric(new_data$`4G`)
cor.test(new_data$Price,new_data$`4G`)
result<-cor.test(data$Price,data$Battery,method = 'pearson')
print(result)
result<-cor.test(data$Price,data$Screensize,method = 'pearson')
print(result)
result<-cor.test(data$Price,data$Resolution.x,method = 'pearson')
print(result)
result<-cor.test(data$Price,data$Resolution.y,method = 'pearson')
print(result)
result<-cor.test(data$Price,data$NumOfProcessor,method = 'pearson')
print(result)
result<-cor.test(data$Price,data$Ram,method = 'pearson')
print(result)
result<-cor.test(data$InternalStorage,data$Price,method = 'pearson')
print(result)
result<-cor.test(data$RearCamera,data$Price,method = 'pearson')
print(result)
result<-cor.test(data$FrontCamera,data$Price,method = 'pearson')
print(result)
result<-cor.test(data$Price,data$NumOfSims)
print(result)
new_data<-data
#new_data$Model<-as.numeric(as.factor(new_data$Model))
#Đổi biến Touchscreen về dạng số
new_data[new_data$Touchscreen == "Yes",]$Touchscreen<-as.integer(1)
new_data[new_data$Touchscreen == "No",]$Touchscreen<-as.integer(0)
new_data$Touchscreen<-as.numeric(new_data$Touchscreen)
#Đổi biến OS về dạng số
new_data$OS = as.numeric(as.factor(new_data$OS))
#Đổi biến Bluetooth về dạng số
new_data[new_data$Bluetooth == "Yes",]['Bluetooth']<-as.integer(1)
new_data[new_data$Bluetooth == "No",]['Bluetooth']<-as.integer(0)
new_data$Bluetooth<-as.numeric(new_data$Bluetooth)
#Đổi biến Wifi về dạng số
new_data[new_data$Wifi == "Yes",]['Wifi']<-as.integer(1)
new_data[new_data$Wifi == "No",]['Wifi']<-as.integer(0)
new_data$Wifi<-as.numeric(new_data$Wifi)
#Đổi biến GPS về dạng số
new_data[new_data$GPS == "Yes",]['GPS']<-as.integer(1)
new_data[new_data$GPS == "No",]['GPS']<-as.integer(0)
new_data$GPS<-as.numeric(new_data$GPS)
#Đổi biến 3G về dạng số
new_data[new_data$`3G` == "Yes",]['3G']<-as.integer(1)
new_data[new_data$`3G` == "No",]['3G']<-as.integer(0)
new_data$`3G`<-as.numeric(new_data$`3G`)
#Đổi biến 4G về dạng số
new_data[new_data$`4G` == "Yes",]['4G']<-as.integer(1)
new_data[new_data$`4G` == "No",]['4G']<-as.integer(0)
new_data$`4G`<-as.numeric(new_data$`4G`)
head(new_data,10)
brand<-unique(data[order(data$Brand),]$Brand)
numOfPhone<-c()
for (i in 1:length(brand))
{
numOfPhone<-append(numOfPhone,nrow(filter(data,data$Brand ==brand[i])))
}
brand_numOfPhone <-data.frame(brand,numOfPhone)
brand_numOfPhone<-brand_numOfPhone%>%filter(numOfPhone>18)
new_data<-new_data %>% filter(new_data$Brand%in%brand_numOfPhone$brand)
new_data<-new_data[order(new_data$Brand),]
head(brand_numOfPhone,10)
head(new_data)
#
repeated_hold_out = vector(length = 0)
for (i in 1:100) {
# tạo tập train và test data theo tỉ lệ 8 train 2 test
rows <- nrow(new_data)
f <- 0.5
upper_bound <- floor(f * rows)
permuted_data <- new_data[sample(rows), ]
train_data <- permuted_data[1:upper_bound, ]
test_data <- permuted_data[(upper_bound+1):rows, ]
#Model dự đoán cho tất cả điện thoại
train_data$Brand <- as.numeric(as.factor(train_data$Brand))
train_data_lm <- lm(train_data$Price ~
train_data$Brand+
train_data$Battery+
train_data$Screensize+
train_data$Touchscreen+
train_data$Resolution.x+
train_data$Resolution.y+
train_data$NumOfProcessor+
train_data$Ram+
train_data$InternalStorage+
train_data$RearCamera+
train_data$FrontCamera+
train_data$OS+
train_data$Wifi+
train_data$Bluetooth+
train_data$GPS+
train_data$NumOfSims+
train_data$`3G`+
train_data$`4G`
,data = train_data)
#print(summary(train_data_lm)$r.squared)
test_data$Brand <- as.numeric(as.factor(test_data$Brand))
#vector giá dự đoán
predicted.dat <- predict(train_data_lm, newdata = test_data)
#vector error
delta <- predicted.dat - test_data$Price
#khoảng tin cậy cho mức tin cậy 95% trung bình delta
repeated_hold_out <- c(repeated_hold_out, unname(t.test(delta, conf.level =   0.95)[["estimate"]]))
}
repeated_hold_out_mean = sum(repeated_hold_out) / 100
repeated_hold_out_mean
fn_RegressionForEachBrand<-function(train_data,test_data){
#Sắp xếp lại theo Brand
test_data <- test_data[order(test_data$Brand),]
#result lưu trữ giá dự đoán
result<-data.frame(Name = test_data$Name,
Price = test_data$Price,
PredictedPrice=NA)
#lặp từng dòng
for (i in 1:nrow(test_data))
{
#Kiểm tra điều kiện
if (!test_data[i,]$Brand %in% train_data$Brand)
{
print(paste("Brand",test_data[i,]$Brand, "không tồn tại trong database!"))
next
}
else if (!test_data[i,]$OS %in% train_data$OS)
{
print(paste("OS",test_data[i,]$OS ,"không tồn tại trong database!"))
next
}
#Tạo model cho Brand ở hiện tại
regression_data <- train_data[train_data$Brand == test_data[i,]$Brand,]
regression <- lm(regression_data$Price ~
regression_data$Battery+
regression_data$Screensize+
regression_data$Touchscreen+
regression_data$Resolution.x+
regression_data$Resolution.y+
regression_data$NumOfProcessor+
regression_data$Ram+
regression_data$InternalStorage+
regression_data$RearCamera+
regression_data$FrontCamera+
regression_data$OS+
regression_data$Wifi+
regression_data$Bluetooth+
regression_data$GPS+
regression_data$NumOfSims+
regression_data$`3G`+
regression_data$`4G`
,data = regression_data)
regression_data<-test_data[i,]
#Đoán giá ở dòng hiện tại
result[i,]$PredictedPrice <- predict(regression,regression_data)
}
return(result)
}
suppressWarnings({
regressionForEachBrand_result<-fn_RegressionForEachBrand(train_data,train_data)
})
regressionForEachBrand_result<-regressionForEachBrand_result%>%
mutate(error= PredictedPrice-Price,sq.error = error^2)
print(regressionForEachBrand_result)
t.test(na.omit(regressionForEachBrand_result$error),conf.level = 0.95)
kNN_train_data<-train_data
#Thêm cột cho tập kNN_train_data theo
for (i in 1:nrow(brand_numOfPhone))
{
#Lấy giá unique trong cột Brand rồi tạo cột mới theo Brand đó
new_column_name<-brand_numOfPhone[i,]$brand
#Gán tất cả giá trị của cột đó bằng 0
kNN_train_data[new_column_name]<-0
}
#Gán encoding cho tập kNN_train_data:
for (i in 1:nrow(kNN_train_data))
{
#Lấy Brand của cột đó
column_name<-kNN_train_data[i,]$Brand
#Gán giá trị 1 với cột có tên giống với column_name
kNN_train_data[i,column_name]<-1
}
kNN_train_data<-subset(kNN_train_data,select = -c(X,Name,Brand,Model))
kNN_train_data
kNN_test_data<-test_data
#Thêm cột cho tập kNN_test_data theo
for (i in 1:nrow(brand_numOfPhone))
{
#Lấy giá unique trong cột Brand rồi tạo cột mới theo Brand đó
new_column_name<-brand_numOfPhone[i,]$brand
#Gán tất cả giá trị của cột đó bằng 0
kNN_test_data[new_column_name]<-0
}
#Gán encoding cho tập kNN_test_data:
for (i in 1:nrow(kNN_test_data))
{
#Lấy Brand của cột đó
column_name<-kNN_test_data[i,]$Brand
#Gán giá trị 1 với cột có tên giống với column_name
kNN_test_data[i,column_name]<-1
}
kNN_test_data<-subset(kNN_test_data,select = -c(X,Name,Brand,Model))
kNN_test_data
set.seed(1)
#inTrain<-createDataPartition(kNNdata$Price,p=0.8,list=FALSE)
#knn_training<-kNNdata[inTrain,]
#knn_test<-kNNdata[-inTrain,]
#knn_test<-as.data.frame(do.call(cbind, knn_test))
#knn_training<-as.data.frame(do.call(cbind, knn_training))
tuneGrid<-expand.grid(k=seq(1,59, by=2))
kNNModel<-train(Price~.,data = kNN_train_data, method = 'knn',
preProcess = c('center','scale'),
trControl = trainControl(method ='repeatedcv',number=10,repeats = 5),
tuneGrid = tuneGrid)
qqnorm(resid(kNNModel))
qqline(resid(kNNModel))
plot(fitted(kNNModel),resid(kNNModel),ylim=c(-50,50))
#kNNModel$results
kNN_result<-data.frame(Price = kNN_test_data$Price,
PredictedPrice = predict(kNNModel,kNN_test_data))
#knn_rmse<-sqrt(mean(kNN_result$Price-kNN_result$PredictedPrice)^2)
kNN_result<-kNN_result%>%
mutate(error= PredictedPrice-Price,sq.error = error^2)
t.test(kNN_result$error,conf.level = 0.95)
kNN_result<-data.frame(Price = kNN_train_data$Price,
PredictedPrice = predict(kNNModel,kNN_train_data))
kNN_result<-kNN_result%>%
mutate(error= PredictedPrice-Price,sq.error = error^2)
t.test(kNN_result$error,conf.level = 0.95)
repeated_hold_out_mean = sum(repeated_hold_out) / 100
repeated_hold_out_mean
repeated_hold_out_mean = sum(repeated_hold_out) / 100
repeated_hold_out_mean
fn_RegressionForEachBrand<-function(train_data,test_data){
#Sắp xếp lại theo Brand
test_data <- test_data[order(test_data$Brand),]
#result lưu trữ giá dự đoán
result<-data.frame(Name = test_data$Name,
Price = test_data$Price,
PredictedPrice=NA)
#lặp từng dòng
for (i in 1:nrow(test_data))
{
#Kiểm tra điều kiện
if (!test_data[i,]$Brand %in% train_data$Brand)
{
print(paste("Brand",test_data[i,]$Brand, "không tồn tại trong database!"))
next
}
else if (!test_data[i,]$OS %in% train_data$OS)
{
print(paste("OS",test_data[i,]$OS ,"không tồn tại trong database!"))
next
}
#Tạo model cho Brand ở hiện tại
regression_data <- train_data[train_data$Brand == test_data[i,]$Brand,]
regression <- lm(regression_data$Price ~
regression_data$Battery+
regression_data$Screensize+
regression_data$Touchscreen+
regression_data$Resolution.x+
regression_data$Resolution.y+
regression_data$NumOfProcessor+
regression_data$Ram+
regression_data$InternalStorage+
regression_data$RearCamera+
regression_data$FrontCamera+
regression_data$OS+
regression_data$Wifi+
regression_data$Bluetooth+
regression_data$GPS+
regression_data$NumOfSims+
regression_data$`3G`+
regression_data$`4G`
,data = regression_data)
regression_data<-test_data[i,]
#Đoán giá ở dòng hiện tại
result[i,]$PredictedPrice <- predict(regression,regression_data)
}
return(result)
}
suppressWarnings({
regressionForEachBrand_result<-fn_RegressionForEachBrand(train_data,train_data)
})
regressionForEachBrand_result<-regressionForEachBrand_result%>%
mutate(error= PredictedPrice-Price,sq.error = error^2)
print(regressionForEachBrand_result)
t.test(na.omit(regressionForEachBrand_result$error),conf.level = 0.95)
kNN_train_data<-train_data
#Thêm cột cho tập kNN_train_data theo
for (i in 1:nrow(brand_numOfPhone))
{
#Lấy giá unique trong cột Brand rồi tạo cột mới theo Brand đó
new_column_name<-brand_numOfPhone[i,]$brand
#Gán tất cả giá trị của cột đó bằng 0
kNN_train_data[new_column_name]<-0
}
#Gán encoding cho tập kNN_train_data:
for (i in 1:nrow(kNN_train_data))
{
#Lấy Brand của cột đó
column_name<-kNN_train_data[i,]$Brand
#Gán giá trị 1 với cột có tên giống với column_name
kNN_train_data[i,column_name]<-1
}
kNN_train_data<-subset(kNN_train_data,select = -c(X,Name,Brand,Model))
kNN_train_data
kNN_test_data<-test_data
#Thêm cột cho tập kNN_test_data theo
for (i in 1:nrow(brand_numOfPhone))
{
#Lấy giá unique trong cột Brand rồi tạo cột mới theo Brand đó
new_column_name<-brand_numOfPhone[i,]$brand
#Gán tất cả giá trị của cột đó bằng 0
kNN_test_data[new_column_name]<-0
}
#Gán encoding cho tập kNN_test_data:
for (i in 1:nrow(kNN_test_data))
{
#Lấy Brand của cột đó
column_name<-kNN_test_data[i,]$Brand
#Gán giá trị 1 với cột có tên giống với column_name
kNN_test_data[i,column_name]<-1
}
kNN_test_data<-subset(kNN_test_data,select = -c(X,Name,Brand,Model))
kNN_test_data
set.seed(1)
#inTrain<-createDataPartition(kNNdata$Price,p=0.8,list=FALSE)
#knn_training<-kNNdata[inTrain,]
#knn_test<-kNNdata[-inTrain,]
#knn_test<-as.data.frame(do.call(cbind, knn_test))
#knn_training<-as.data.frame(do.call(cbind, knn_training))
tuneGrid<-expand.grid(k=seq(1,59, by=2))
kNNModel<-train(Price~.,data = kNN_train_data, method = 'knn',
preProcess = c('center','scale'),
trControl = trainControl(method ='repeatedcv',number=10,repeats = 5),
tuneGrid = tuneGrid)
qqnorm(resid(kNNModel))
qqline(resid(kNNModel))
plot(fitted(kNNModel),resid(kNNModel),ylim=c(-50,50))
#kNNModel$results
kNN_result<-data.frame(Price = kNN_test_data$Price,
PredictedPrice = predict(kNNModel,kNN_test_data))
#knn_rmse<-sqrt(mean(kNN_result$Price-kNN_result$PredictedPrice)^2)
kNN_result<-kNN_result%>%
mutate(error= PredictedPrice-Price,sq.error = error^2)
t.test(kNN_result$error,conf.level = 0.95)
kNN_result<-data.frame(Price = kNN_train_data$Price,
PredictedPrice = predict(kNNModel,kNN_train_data))
kNN_result<-kNN_result%>%
mutate(error= PredictedPrice-Price,sq.error = error^2)
t.test(kNN_result$error,conf.level = 0.95)
#
repeated_hold_out = vector(length = 0)
suppressWarnings({
for (i in 1:100) {
# tạo tập train và test data theo tỉ lệ 8 train 2 test
rows <- nrow(new_data)
f <- 0.5
upper_bound <- floor(f * rows)
permuted_data <- new_data[sample(rows), ]
train_data <- permuted_data[1:upper_bound, ]
test_data <- permuted_data[(upper_bound+1):rows, ]
#Model dự đoán cho tất cả điện thoại
train_data$Brand <- as.numeric(as.factor(train_data$Brand))
train_data_lm <- lm(train_data$Price ~
train_data$Brand+
train_data$Battery+
train_data$Screensize+
train_data$Touchscreen+
train_data$Resolution.x+
train_data$Resolution.y+
train_data$NumOfProcessor+
train_data$Ram+
train_data$InternalStorage+
train_data$RearCamera+
train_data$FrontCamera+
train_data$OS+
train_data$Wifi+
train_data$Bluetooth+
train_data$GPS+
train_data$NumOfSims+
train_data$`3G`+
train_data$`4G`
,data = train_data)
#print(summary(train_data_lm)$r.squared)
test_data$Brand <- as.numeric(as.factor(test_data$Brand))
#vector giá dự đoán
predicted.dat <- predict(train_data_lm, newdata = test_data)
#vector error
delta <- predicted.dat - test_data$Price
#khoảng tin cậy cho mức tin cậy 95% trung bình delta
repeated_hold_out <- c(repeated_hold_out, unname(t.test(delta, conf.level =   0.95)[["estimate"]]))
}
})
repeated_hold_out_mean = sum(repeated_hold_out) / 100
repeated_hold_out_mean
repeated_hold_out_mean = sum(repeated_hold_out) / 100
repeated_hold_out_mean
repeated_hold_out_mean = sum(repeated_hold_out) / 100
repeated_hold_out_mean
repeated_hold_out_mean = sum(repeated_hold_out) / 100
repeated_hold_out_mean
repeated_hold_out_mean = sum(repeated_hold_out) / 100
repeated_hold_out_mean
?floor
floor(3)
floor(4)
floor(0.5)
floor(0.5)for (i in 1:100) {
for (i in 1:100) {
# tạo tập train và test data theo tỉ lệ 8 train 2 test
rows <- nrow(new_data)
f <- 0.5
upper_bound <- floor(f * rows)
permuted_data <- new_data[sample(rows), ]
train_data <- permuted_data[1:upper_bound, ]
test_data <- permuted_data[(upper_bound+1):rows, ]
train_data
test_data
}
new_data<-data
new_data[new_data$Touchscreen == "Yes",]['Touchscreen']<-as.integer(1)
new_data[new_data$Touchscreen == "No",]['Touchscreen']<-as.integer(0)
new_data$Touchscreen<-as.numeric(new_data$Touchscreen)
cor.test(new_data$Price,new_data$Touchscreen)
new_data<-data
new_data<-new_data[order(new_data$Brand),]
new_brand = `as.factor`(new_data$Brand)
new_brand<-as.numeric(new_brand)
summary(aov(new_data$Price~new_brand))
new_data<-data
new_data<-new_data[order(new_data$OS),]
new_OS = as.numeric(as.factor(new_data$OS))
summary(aov(new_data$Price~new_OS))
new_data<-data
new_data[new_data$`3G` == "Yes",]['3G']<-as.integer(1)
new_data[new_data$`3G` == "No",]['3G']<-as.integer(0)
new_data$`3G`<-as.numeric(new_data$`3G`)
cor.test(new_data$Price,new_data$`3G`)
floor(500)
sample
sample(50)
