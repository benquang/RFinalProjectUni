new_price = new_data$Price
summary(aov(new_OS~new_price))
new_data<-data
new_data[new_data$GPS == "Yes",]['GPS']<-as.integer(1)
new_data[new_data$GPS == "No",]['GPS']<-as.integer(0)
new_data$GPS<-as.numeric(new_data$GPS)
cor.test(new_data$Price,new_data$GPS)
new_data<-data
new_data[new_data$`3G` == "Yes",]['3G']<-as.integer(1)
new_data[new_data$`3G` == "No",]['3G']<-as.integer(0)
new_data$`3G`<-as.numeric(new_data$`3G`)
cor.test(new_data$Price,new_data$`3G`)
new_data<-data
new_data[new_data$`4G` == "Yes",]['4G']<-as.integer(1)
new_data[new_data$`4G` == "No",]['4G']<-as.integer(0)
new_data$`4G`<-as.numeric(new_data$`4G`)
cor.test(new_data$Price,new_data$`4G`)
result<-cor.test(data$Price,data$Battery,method = 'pearson')
print(result)
result<-cor.test(data$Price,data$Screensize,method = 'pearson')
print(result)
result<-cor.test(data$Price,data$Resolution.x,method = 'pearson')
print(result)
result<-cor.test(data$Price,data$Resolution.y,method = 'pearson')
print(result)
result<-cor.test(data$Price,data$NumOfProcessor,method = 'pearson')
print(result)
result<-cor.test(data$Price,data$Ram,method = 'pearson')
print(result)
result<-cor.test(data$InternalStorage,data$Price,method = 'pearson')
print(result)
result<-cor.test(data$RearCamera,data$Price,method = 'pearson')
print(result)
result<-cor.test(data$FrontCamera,data$Price,method = 'pearson')
print(result)
result<-cor.test(data$Price,data$NumOfSims)
print(result)
new_data<-data
new_data$Model<-as.numeric(as.factor(new_data$Model))
new_data[new_data$Touchscreen == "Yes",]$Touchscreen<-as.integer(1)
new_data[new_data$Touchscreen == "No",]$Touchscreen<-as.integer(0)
new_data$Touchscreen<-as.numeric(new_data$Touchscreen)
new_data$OS = as.numeric(as.factor(new_data$OS))
new_data[new_data$Bluetooth == "Yes",]['Bluetooth']<-as.integer(1)
new_data[new_data$Bluetooth == "No",]['Bluetooth']<-as.integer(0)
new_data$Bluetooth<-as.numeric(new_data$Bluetooth)
new_data[new_data$Wifi == "Yes",]['Wifi']<-as.integer(1)
new_data[new_data$Wifi == "No",]['Wifi']<-as.integer(0)
new_data$Wifi<-as.numeric(new_data$Wifi)
new_data[new_data$GPS == "Yes",]['GPS']<-as.integer(1)
new_data[new_data$GPS == "No",]['GPS']<-as.integer(0)
new_data$GPS<-as.numeric(new_data$GPS)
new_data[new_data$`3G` == "Yes",]['3G']<-as.integer(1)
new_data[new_data$`3G` == "No",]['3G']<-as.integer(0)
new_data$`3G`<-as.numeric(new_data$`3G`)
new_data[new_data$`4G` == "Yes",]['4G']<-as.integer(1)
new_data[new_data$`4G` == "No",]['4G']<-as.integer(0)
new_data$`4G`<-as.numeric(new_data$`4G`)
head(new_data,10)
brand<-unique(data[order(data$Brand),]$Brand)
numOfPhone<-c()
for (i in 1:length(brand))
{
numOfPhone<-append(numOfPhone,nrow(filter(data,data$Brand ==brand[i])))
}
brand_numOfPhone <-data.frame(brand,numOfPhone)
brand_numOfPhone<-brand_numOfPhone%>%filter(numOfPhone>18)
brand_numOfPhone[1:nrow(brand_numOfPhone),1]
new_data<-new_data %>% filter(new_data$Brand%in%brand_numOfPhone$brand)
new_data<-new_data[order(new_data$Brand),]
OStoNum<-data.frame(OS = unique(data[order(data$OS),]$OS))
OStoNum$Num<-c(1:nrow(OStoNum))
OStoNum
glimpse(new_data)
head(new_data)
test_data<-read.csv('./test_data.csv')
colnames(test_data)[5]<-'Battery'
colnames(test_data)[6]<-'Screensize'
colnames(test_data)[10]<-'NumOfProcessor'
colnames(test_data)[11]<-'Ram'
colnames(test_data)[12]<-'InternalStorage'
colnames(test_data)[13]<-'RearCamera'
colnames(test_data)[14]<-'FrontCamera'
colnames(test_data)[15]<-'OS'
colnames(test_data)[16]<-'Wifi'
colnames(test_data)[19]<-'NumOfSims'
colnames(test_data)[20]<-'3G'
colnames(test_data)[21]<-'4G'
test_data[test_data$Touchscreen == "Yes",]$Touchscreen<-as.integer(1)
#test_data[test_data$Touchscreen == "No",]$Touchscreen<-as.integer(0)
test_data$Touchscreen<-as.numeric(test_data$Touchscreen)
for (i in 1:nrow(test_data))
{
for (j in 1:nrow(OStoNum))
{
if (test_data[i,]$OS==OStoNum[j,]$OS)
{
test_data[i,]$OS = OStoNum[j,]$Num
}
}
}
test_data$OS<-as.numeric(test_data$OS)
test_data[test_data$Bluetooth == "Yes",]['Bluetooth']<-as.integer(1)
#test_data[test_data$Bluetooth == "No",]['Bluetooth']<-as.integer(0)
test_data$Bluetooth<-as.numeric(test_data$Bluetooth)
test_data[test_data$Wifi == "Yes",]['Wifi']<-as.integer(1)
#test_data[test_data$Wifi == "No",]['Wifi']<-as.integer(0)
test_data$Wifi<-as.numeric(test_data$Wifi)
test_data[test_data$GPS == "Yes",]['GPS']<-as.integer(1)
#test_data[test_data$GPS == "No",]['GPS']<-as.integer(0)
test_data$GPS<-as.numeric(test_data$GPS)
test_data[test_data$`3G` == "Yes",]['3G']<-as.integer(1)
#test_data[test_data$`3G` == "No",]['3G']<-as.integer(0)
test_data$`3G`<-as.numeric(test_data$`3G`)
test_data[test_data$`4G` == "Yes",]['4G']<-as.integer(1)
#test_data[test_data$`4G` == "No",]['4G']<-as.integer(0)
test_data$`4G`<-as.numeric(test_data$`4G`)
head(test_data,10)
regression_data<-new_data
regression_data$Brand<-as.numeric(as.factor(regression_data$Brand))
regression<-lm(regression_data$Price ~
regression_data$Brand+
regression_data$Battery+
regression_data$Screensize+
regression_data$Touchscreen+
regression_data$Resolution.x+
regression_data$Resolution.y+
regression_data$NumOfProcessor+
regression_data$Ram+
regression_data$InternalStorage+
regression_data$RearCamera+
regression_data$FrontCamera+
regression_data$OS+
regression_data$Wifi+
regression_data$Bluetooth+
regression_data$GPS+
regression_data$NumOfSims+
regression_data$`3G`+
regression_data$`4G`
,data = regression_data)
summary(regression)
regression_data<-test_data
regression_data$Brand<-as.numeric(as.factor(regression_data$Brand))
PredictedPrice = predict(regression,regression_data)
oneForAll<-regression_data%>%mutate(PredictedPrice = predict(regression,regression_data))
oneForAll<-oneForAll%>%mutate(error= PredictedPrice-Price,sq.error = error^2)
oneForAll<-oneForAll[c('Name','Price','PredictedPrice','error','sq.error')]
oneForAll
mse<-mean(oneForAll$sq.error)
rmse<-sqrt(mse)
rmse
#include=FALSE
for (x in brand_numOfPhone$brand)
{
print(x)
temp_data<-new_data %>% filter(new_data$Brand == x)
regression<-lm(temp_data$Price ~
temp_data$Battery+
temp_data$Screensize+
temp_data$Touchscreen+
temp_data$Resolution.x+
temp_data$Resolution.y+
temp_data$NumOfProcessor+
temp_data$Ram+
temp_data$InternalStorage+
temp_data$RearCamera+
temp_data$FrontCamera+
temp_data$OS+
temp_data$Wifi+
temp_data$Bluetooth+
temp_data$GPS+
temp_data$NumOfSims+
temp_data$`3G`+
temp_data$`4G`
,data = temp_data)
print(summary(regression))
print(cat('\n\n\n\n'))
}
fn_RegressionBasedOnBrand<-function(test_data,new_data){
#Sắp xếp lại theo Brand
test_data<-test_data[order(test_data$Brand),]
#result lưu trữ giá dự đoán
result<-data.frame(Name = test_data$Name,
Price = test_data$Price,
PredictedPrice=NA)
#lặp từng dòng
for (i in 1:nrow(test_data))
{
#Kiểm tra điều kiện
if (!test_data[i,]$Brand %in% new_data$Brand)
{
print(paste("Brand",test_data[i,]$Brand, "không tồn tại trong database!"))
next
}
else if (!test_data[i,]$OS %in% new_data$OS)
{
print(paste("OS không tồn tại trong database!"))
next
}
#Tạo model cho Brand ở hiện tại
regression_data<-new_data[new_data$Brand == test_data[i,]$Brand,]
regression<-lm(regression_data$Price ~
regression_data$Battery+
regression_data$Screensize+
regression_data$Touchscreen+
regression_data$Resolution.x+
regression_data$Resolution.y+
regression_data$NumOfProcessor+
regression_data$Ram+
regression_data$InternalStorage+
regression_data$RearCamera+
regression_data$FrontCamera+
regression_data$OS+
regression_data$Wifi+
regression_data$Bluetooth+
regression_data$GPS+
regression_data$NumOfSims+
regression_data$`3G`+
regression_data$`4G`
,data = regression_data)
regression_data<-test_data[i,]
#Đoán giá ở dòng hiện tại
result[i,]$PredictedPrice <- predict(regression,regression_data)
}
return(result)
}
suppressWarnings({
modelForeachBrand<-fn_RegressionBasedOnBrand(test_data,new_data)
})
modelForeachBrand<-modelForeachBrand%>%
mutate(error= PredictedPrice-Price,sq.error = error^2)
print(modelForeachBrand)
mse_ForeachBrand<-mean(na.omit(modelForeachBrand$sq.error))
rmse_ForeachBrand<-sqrt(mse_ForeachBrand)
rmse_ForeachBrand
#regression_train<-regression_train%>%
#                    mutate(error= PredictedPrice-Price,sq.error = error^2)
#regression_train[c('Name','Price','PredictedPrice','error','sq.error')]
#mse<-mean(regression_train$sq.error)
#rmse<-sqrt(mse)
#rmse
kNNdata<-new_data
for (i in 1:length(unique(kNNdata$Brand)))
{
new_column_name<-unique(kNNdata$Brand)[i]
kNNdata[new_column_name]<-0
}
for (i in 1:nrow(kNNdata))
{
column_name<-kNNdata[i,]$Brand
kNNdata[i,column_name]<-1
}
kNNdata<-subset(kNNdata,select = -c(X,Name,Brand))
library(caret)
set.seed(1)
library(caret)
library(caret)
set.seed(1)
library(caret)
set.seed(1)
library(caret)
set.seed(1)
inTrain<-createDataPartition(kNNdata$Model,p=0.7,list=FALSE)
inTrain
library(caret)
set.seed(1)
inTrain<-createDataPartition(kNNdata$Price,p=0.7,list=FALSE)
inTrain
library(caret)
set.seed(1)
inTrain<-createDataPartition(kNNdata$Price,p=0.7,list=FALSE)
training<-kNNdata[inTrain,]
test<-knn[-inTrain,]
library(caret)
set.seed(1)
inTrain<-createDataPartition(kNNdata$Price,p=0.7,list=FALSE)
training<-kNNdata[inTrain,]
test<-kNNdata[-inTrain,]
test
typeof(training)
as.data.frame(do.call(cbind, training))
library(caret)
set.seed(1)
inTrain<-createDataPartition(kNNdata$Price,p=0.7,list=FALSE)
training<-kNNdata[inTrain,]
test<-kNNdata[-inTrain,]
test<-as.data.frame(do.call(cbind, test))
training<-as.data.frame(do.call(cbind, training))
train(Price~.,data = training, method = 'knn', preProcess = c('center,scale')
library(caret)
set.seed(1)
inTrain<-createDataPartition(kNNdata$Price,p=0.7,list=FALSE)
training<-kNNdata[inTrain,]
test<-kNNdata[-inTrain,]
test<-as.data.frame(do.call(cbind, test))
training<-as.data.frame(do.call(cbind, training))
kNNModel<-train(Price~.,data = training, method = 'knn', preProcess = c('center,scale'))
library(caret)
set.seed(1)
inTrain<-createDataPartition(kNNdata$Price,p=0.7,list=FALSE)
training<-kNNdata[inTrain,]
test<-kNNdata[-inTrain,]
test<-as.data.frame(do.call(cbind, test))
training<-as.data.frame(do.call(cbind, training))
tuneGrid<-expand.grid(k=seq(1,59, by=2))
kNNModel<-train(Price~.,data = training, method = 'knn',
preProcess = c('center,scale'),
trControl = trainControl(method ='repeatedcv',number=10,repeats = 5),tuneGrid = tuneGrid)
library(caret)
set.seed(1)
inTrain<-createDataPartition(kNNdata$Price,p=0.7,list=FALSE)
training<-kNNdata[inTrain,]
test<-kNNdata[-inTrain,]
test<-as.data.frame(do.call(cbind, test))
training<-as.data.frame(do.call(cbind, training))
tuneGrid<-expand.grid(k=seq(1,59, by=2))
kNNModel<-train(Price~.,data = training, method = 'knn',
preProcess = c('center','scale'),
trControl = trainControl(method ='repeatedcv',number=10,repeats = 5),tuneGrid = tuneGrid)
kNNModel
library(caret)
set.seed(1)
inTrain<-createDataPartition(kNNdata$Price,p=0.7,list=FALSE)
training<-kNNdata[inTrain,]
test<-kNNdata[-inTrain,]
test<-as.data.frame(do.call(cbind, test))
training<-as.data.frame(do.call(cbind, training))
tuneGrid<-expand.grid(k=seq(1,59, by=2))
kNNModel<-train(Price~.,data = training, method = 'knn',
preProcess = c('center','scale'),
trControl = trainControl(method ='repeatedcv',number=10,repeats = 5),tuneGrid = tuneGrid)
kNNModel$results
kNNModel$results
kNNModel$results
predict(kNNModel,test)
#kNNModel$results
test_data$Price
predict(kNNModel,test)
#kNNModel$results
test_data$Price
print("kNN: Ở đây")
predict(kNNModel,test)
#kNNModel$results
test$Price
print("kNN: Ở đây")
predict(kNNModel,test)
#kNNModel$results
kNN_result<-data.frame(Price = test$Price,
PredictedPrice = predict(kNNModel,test))
#kNNModel$results
kNN_result<-data.frame(Price = test$Price,
PredictedPrice = predict(kNNModel,test))
kNN_result
#kNNModel$results
kNN_result<-data.frame(Price = knn_test$Price,
PredictedPrice = predict(kNNModel,test))
library(caret)
set.seed(1)
inTrain<-createDataPartition(kNNdata$Price,p=0.7,list=FALSE)
knn_training<-kNNdata[inTrain,]
knn_test<-kNNdata[-inTrain,]
knn_test<-as.data.frame(do.call(cbind, knn_test))
knn_training<-as.data.frame(do.call(cbind, knn_training))
tuneGrid<-expand.grid(k=seq(1,59, by=2))
kNNModel<-train(Price~.,data = knn_training, method = 'knn',
preProcess = c('center','scale'),
trControl = trainControl(method ='repeatedcv',number=10,repeats = 5),tuneGrid = tuneGrid)
#kNNModel$results
kNN_result<-data.frame(Price = knn_test$Price,
PredictedPrice = predict(kNNModel,test))
knn_rmse<-sqrt(mean(kNN_result$Price-kNN_result$PredictedPrice)^2)
kNN_result
#kNNModel$results
kNN_result<-data.frame(Price = knn_test$Price,
PredictedPrice = predict(kNNModel,test))
knn_rmse<-sqrt(mean(kNN_result$Price-kNN_result$PredictedPrice)^2)
kNN_result
knn_rmse
#kNNModel$results
kNN_result<-data.frame(Price = knn_test$Price,
PredictedPrice = predict(kNNModel,test))
knn_rmse<-sqrt(mean(sum(kNN_result$Price)-sum(kNN_result$PredictedPrice)^2)
kNN_result
#kNNModel$results
kNN_result<-data.frame(Price = knn_test$Price,
PredictedPrice = predict(kNNModel,test))
knn_rmse<-sqrt(mean(sum(kNN_result$Price)-sum(kNN_result$PredictedPrice)^2))
kNN_result
knn_rmse
#kNNModel$results
kNN_result<-data.frame(Price = knn_test$Price,
PredictedPrice = predict(kNNModel,test))
knn_rmse<-sqrt(mean(kNN_result$Price-kNN_result$PredictedPrice^2))
kNN_result
knn_rmse
#kNNModel$results
kNN_result<-data.frame(Price = knn_test$Price,
PredictedPrice = predict(kNNModel,test))
knn_rmse<-sqrt(mean(kNN_result$Price-kNN_result$PredictedPrice^2))
kNN_result
knn_rmse
#kNNModel$results
kNN_result<-data.frame(Price = knn_test$Price,
PredictedPrice = predict(kNNModel,test))
knn_rmse<-sqrt(mean(kNN_result$Price-kNN_result$PredictedPrice)^2)
kNN_result
knn_rmse
kNNModel$results
kNN_result<-data.frame(Price = knn_test$Price,
PredictedPrice = predict(kNNModel,test))
knn_rmse<-sqrt(mean(kNN_result$Price-kNN_result$PredictedPrice)^2)
kNN_result
knn_rmse
#kNNModel$results
kNN_result<-data.frame(Price = knn_test$Price,
PredictedPrice = predict(kNNModel,test))
#knn_rmse<-sqrt(mean(kNN_result$Price-kNN_result$PredictedPrice)^2)
kNN_result<-kNN_result%>%
mutate(error= PredictedPrice-Price,sq.error = error^2)
knn_rmse<-mean(sq.error)
#kNNModel$results
kNN_result<-data.frame(Price = knn_test$Price,
PredictedPrice = predict(kNNModel,test))
#knn_rmse<-sqrt(mean(kNN_result$Price-kNN_result$PredictedPrice)^2)
kNN_result<-kNN_result%>%
mutate(error= PredictedPrice-Price,sq.error = error^2)
knn_rmse<-mean(sq.error)
#kNNModel$results
kNN_result<-data.frame(Price = knn_test$Price,
PredictedPrice = predict(kNNModel,test))
#knn_rmse<-sqrt(mean(kNN_result$Price-kNN_result$PredictedPrice)^2)
kNN_result<-kNN_result%>%
mutate(error= PredictedPrice-Price,sq.error = error^2)
knn_rmse<-mean(sq.error)
#kNNModel$results
kNN_result<-data.frame(Price = knn_test$Price,
PredictedPrice = predict(kNNModel,test))
#knn_rmse<-sqrt(mean(kNN_result$Price-kNN_result$PredictedPrice)^2)
kNN_result<-kNN_result%>%
mutate(error= PredictedPrice-Price,sq.error = error^2)
knn_rmse<-mean(sq.error)
#kNNModel$results
kNN_result<-data.frame(Price = knn_test$Price,
PredictedPrice = predict(kNNModel,test))
#knn_rmse<-sqrt(mean(kNN_result$Price-kNN_result$PredictedPrice)^2)
kNN_result<-kNN_result%>%
mutate(error= PredictedPrice-Price,sq.error = error^2)
knn_rmse<-mean(sq.error)
#kNNModel$results
kNN_result<-data.frame(Price = knn_test$Price,
PredictedPrice = predict(kNNModel,test))
#knn_rmse<-sqrt(mean(kNN_result$Price-kNN_result$PredictedPrice)^2)
kNN_result<-kNN_result%>%
mutate(error= PredictedPrice-Price)%>%mutate(sq.error = error^2)
knn_rmse<-mean(sq.error)
#kNNModel$results
kNN_result<-data.frame(Price = knn_test$Price,
PredictedPrice = predict(kNNModel,test))
#knn_rmse<-sqrt(mean(kNN_result$Price-kNN_result$PredictedPrice)^2)
kNN_result<-kNN_result%>%
mutate(error= PredictedPrice-Price,sq.error = error^2)
knn_rmse<-mean(knn_result$sq.error)
#kNNModel$results
kNN_result<-data.frame(Price = knn_test$Price,
PredictedPrice = predict(kNNModel,test))
#knn_rmse<-sqrt(mean(kNN_result$Price-kNN_result$PredictedPrice)^2)
kNN_result<-kNN_result%>%
mutate(error= PredictedPrice-Price,sq.error = error^2)
knn_rmse<-mean(kNN_result$sq.error)
#kNN_result
knn_rmse
#kNNModel$results
kNN_result<-data.frame(Price = knn_test$Price,
PredictedPrice = predict(kNNModel,test))
#knn_rmse<-sqrt(mean(kNN_result$Price-kNN_result$PredictedPrice)^2)
kNN_result<-kNN_result%>%
mutate(error= PredictedPrice-Price,sq.error = error^2)
knn_rmse<-mean(kNN_result$sq.error)
kNN_result
knn_rmse
library(caret)
set.seed(1)
inTrain<-createDataPartition(kNNdata$Price,p=0.8,list=FALSE)
knn_training<-kNNdata[inTrain,]
knn_test<-kNNdata[-inTrain,]
knn_test<-as.data.frame(do.call(cbind, knn_test))
knn_training<-as.data.frame(do.call(cbind, knn_training))
tuneGrid<-expand.grid(k=seq(1,59, by=2))
kNNModel<-train(Price~.,data = knn_training, method = 'knn',
preProcess = c('center','scale'),
trControl = trainControl(method ='repeatedcv',number=10,repeats = 5),tuneGrid = tuneGrid)
#kNNModel$results
kNN_result<-data.frame(Price = knn_test$Price,
PredictedPrice = predict(kNNModel,test))
#kNNModel$results
kNN_result<-data.frame(Price = knn_test$Price,
PredictedPrice = predict(kNNModel,knn_test))
#knn_rmse<-sqrt(mean(kNN_result$Price-kNN_result$PredictedPrice)^2)
kNN_result<-kNN_result%>%
mutate(error= PredictedPrice-Price,sq.error = error^2)
knn_rmse<-mean(kNN_result$sq.error)
kNN_result
knn_rmse
#kNNModel$results
kNN_result<-data.frame(Price = knn_test$Price,
PredictedPrice = predict(kNNModel,knn_test))
#knn_rmse<-sqrt(mean(kNN_result$Price-kNN_result$PredictedPrice)^2)
kNN_result<-kNN_result%>%
mutate(error= PredictedPrice-Price,sq.error = error^2)
knn_rmse<-sqrt(mean(kNN_result$sq.error))
kNN_result
knn_rmse
